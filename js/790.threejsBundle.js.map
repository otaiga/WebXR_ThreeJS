{"version":3,"file":"js/790.threejsBundle.js","mappings":"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","sources":["webpack://webxr-threejs/./src/support/customLoadingBar.ts","webpack://webxr-threejs/./src/support/assetLoader.ts","webpack://webxr-threejs/./src/scenes/main.ts"],"sourcesContent":["const canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\nlet loadingDiv = document.getElementById(\"loadingDiv\");\nlet progress = \"0%\";\nlet loadingText = \"\";\n\n// Resize\nconst resizeLoadingUI = () => {\n  const canvasRect = canvas.getBoundingClientRect();\n  const canvasPositioning = window.getComputedStyle(canvas).position;\n\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  loadingDiv.style.position =\n    canvasPositioning === \"fixed\" ? \"fixed\" : \"absolute\";\n  loadingDiv.style.left = canvasRect.left + \"px\";\n  loadingDiv.style.top = canvasRect.top + \"px\";\n  loadingDiv.style.width = canvasRect.width + \"px\";\n  loadingDiv.style.height = canvasRect.height + \"px\";\n};\n\nexport const showCustomLoadingBar = () => {\n  if (loadingDiv) {\n    return;\n  }\n  loadingDiv = document.createElement(\"div\");\n  loadingDiv.id = \"loadingDiv\";\n\n  loadingDiv.style.height = \"100vh\";\n  loadingDiv.style.width = \"100%\";\n  loadingDiv.style.pointerEvents = \"none\";\n  loadingDiv.style.opacity = \"1\";\n  loadingDiv.style.backgroundColor = \"black\";\n  loadingDiv.style.zIndex = \"-12\";\n  loadingDiv.style.transition = \"opacity 1.5s ease\";\n\n  // loading container\n  const loadingContainer = document.createElement(\"div\");\n  loadingContainer.style.display = \"flex\";\n  loadingContainer.style.alignItems = \"center\";\n  loadingContainer.style.justifyItems = \"center\";\n  loadingContainer.style.justifyContent = \"center\";\n  loadingContainer.style.minHeight = \"100%\";\n  loadingContainer.style.textAlign = \"center\";\n  // div holder\n  const div = document.createElement(\"div\");\n  // container\n  const container = document.createElement(\"div\");\n  container.style.color = \"rgba(66, 135, 245, 1)\";\n  container.style.textAlign = \"center\";\n\n  // holder\n  // const holder = document.createElement(\"div\");\n  // holder.id = \"holder\";\n  // holder.style.lineHeight = \"1.5\";\n  // holder.style.borderRadius = \"9999px\";\n  // holder.style.background = \"white\";\n  // holder.style.height = \"200px\";\n  // holder.style.width = \"200px\";\n  // holder.style.display = \"flex\";\n  // holder.style.alignItems = \"center\";\n  // holder.style.justifyContent = \"center\";\n  // holder.appendChild(logo);\n  // container.appendChild(holder);\n\n  // Heading\n  const heading = document.createElement(\"h3\");\n  heading.innerHTML = \"Please hang tight..\";\n  heading.style.fontSize = \"1.125rem\";\n  heading.style.lineHeight = \"1.5rem\";\n  heading.style.fontWeight = \"500\";\n\n  container.appendChild(heading);\n\n  // Loading text\n  const loadingTextP = document.createElement(\"p\");\n  loadingTextP.id = \"loadingText\";\n  loadingTextP.innerHTML = \"\";\n\n  // Update section\n  const updateDiv = document.createElement(\"div\");\n  updateDiv.style.width = \"100%\";\n  updateDiv.style.backgroundColor = \"gray\";\n  updateDiv.style.borderRadius = \"9999px\";\n  updateDiv.style.height = \"0.625rem\";\n\n  // Percent section\n  const progresssDiv = document.createElement(\"div\");\n  progresssDiv.style.width = progress;\n  progresssDiv.style.backgroundColor = \"blue\";\n  progresssDiv.style.height = \"0.625rem\";\n  progresssDiv.style.borderRadius = \"9999px\";\n  progresssDiv.id = \"progressLevel\";\n\n  updateDiv.appendChild(progresssDiv);\n\n  container.appendChild(updateDiv);\n\n  div.appendChild(container);\n  loadingContainer.appendChild(div);\n\n  container.appendChild(loadingTextP);\n  loadingDiv.appendChild(loadingContainer);\n\n  resizeLoadingUI();\n\n  document.body.insertBefore(loadingDiv, canvas);\n};\n\nexport const hideCustomLoadingBar = () => {\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  const onTransitionEnd = () => {\n    if (loadingDiv) {\n      loadingDiv.remove();\n    }\n  };\n\n  loadingDiv.style.opacity = \"0\";\n  loadingDiv.addEventListener(\"transitionend\", onTransitionEnd);\n};\n\nexport const updateProgress = (progressUpdate: string) => {\n  const progressLevel = document.getElementById(\"progressLevel\");\n  progress = progressUpdate;\n  if (progressLevel) {\n    progressLevel.style.width = progress;\n  }\n};\n\nexport const setLoadingText = (updateText: string) => {\n  const loadingTextElem = document.getElementById(\"loadingText\");\n  loadingText = updateText;\n  if (loadingTextElem) {\n    loadingTextElem.innerHTML = loadingText;\n  }\n};\n","import { LoadingManager } from \"three\";\nimport { GLTF, GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { setLoadingText, updateProgress } from \"./customLoadingBar\";\n\ntype ModelAssets = {\n  [key: string]: GLTF;\n};\n\ninterface AssetContainer {\n  models: ModelAssets;\n}\n\nconst assets: AssetContainer = {\n  models: {},\n};\n\n// Models to load\nlet models = [\"snowScene.glb\"];\n\n// Loading manager to track progress\nconst loadingManager = new LoadingManager();\n\n// Load glTF resource\nexport const loadModel = async (\n  loader: GLTFLoader,\n  model: string\n): Promise<GLTF> =>\n  new Promise((resolve) => {\n    loader.load(\n      // resource URL\n      `models/${model}`,\n      // called when the resource is loaded - onLoad\n      (gltf) => {\n        resolve(gltf);\n      }\n      // Issues with loading GLTF files so using LoadingManager to track loading progress\n      // called while loading is progressing (http request object {loaded and total keys}) - onProgress\n      // (xhr) => {\n      //   console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      // },\n      // called when loading has errors - onError\n      // (error) => {\n      //   console.log(\"An error happened: \", error.message);\n      //   reject(error);\n      // }\n    );\n  });\n\n// Allow loading of all resources\nexport const loadAssets = () =>\n  new Promise<AssetContainer>(async (resolve, reject) => {\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      const percent = Number((itemsLoaded / itemsTotal) * 100).toFixed(0);\n      updateProgress(`${percent}%`);\n      setLoadingText(`Loaded ${itemsLoaded} of ${itemsTotal} files.`);\n    };\n\n    loadingManager.onError = (url) => {\n      reject(\"There was an error loading \" + url);\n    };\n\n    const loader = new GLTFLoader(loadingManager).setPath(\"assets/\");\n    for (const model of models) {\n      try {\n        const gltf = await loadModel(loader, model);\n        assets.models[model] = gltf;\n      } catch (err) {\n        console.log(\"Error loading model: \", err);\n        reject(err);\n      }\n    }\n    resolve(assets);\n  });\n","import {\n  DirectionalLight,\n  HemisphereLight,\n  Mesh,\n  PerspectiveCamera,\n  PlaneGeometry,\n  PMREMGenerator,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\nimport { VRButton } from \"three/examples/jsm/webxr/VRButton\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CreateSceneClass } from \"../createScene\";\nimport { loadAssets } from \"../support/assetLoader\";\nimport {\n  hideCustomLoadingBar,\n  showCustomLoadingBar,\n} from \"../support/customLoadingBar\";\n\nexport class MainScreen implements CreateSceneClass {\n  createScene = async (\n    renderer: WebGLRenderer\n  ): Promise<{\n    scene: Scene;\n    camera: PerspectiveCamera;\n    update: () => void;\n  }> => {\n    const generator = new PMREMGenerator(renderer);\n\n    // Create skybox\n    new RGBELoader().load(\"assets/textures/snowy_park.hdr\", (hdrmap) => {\n      const envmap = generator.fromEquirectangular(hdrmap);\n      scene.background = envmap.texture;\n      scene.environment = envmap.texture;\n    });\n\n    const scene = new Scene();\n    const camera = new PerspectiveCamera(\n      60,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    camera.position.set(0, 1.6, 3);\n\n    // Add light\n    scene.add(new HemisphereLight(0x606060, 0x404040));\n    const light = new DirectionalLight(0xffffff);\n    light.position.set(1, 1, 1).normalize();\n    scene.add(light);\n\n    // Enable XR\n    renderer.xr.enabled = true;\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 2;\n    controls.maxDistance = 10;\n    controls.target.set(0, 2, 0);\n    controls.update();\n\n    showCustomLoadingBar();\n\n    const assets = await loadAssets();\n    const snowSceneAsset = assets.models[\"snowScene.glb\"];\n\n    scene.add(snowSceneAsset.scene);\n    let snowMat;\n    const loadedMaterials = await snowSceneAsset.parser.getDependencies(\n      \"material\"\n    );\n    for (const material of loadedMaterials) {\n      if (material.name === \"Snow\") {\n        snowMat = material;\n      }\n    }\n\n    // Create ground\n    if (snowMat) {\n      const geometry = new PlaneGeometry(100, 100, 20, 20);\n      const ground = new Mesh(geometry, snowMat);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n    }\n\n    // Update next tick before render\n    const update = () => {};\n\n    hideCustomLoadingBar();\n\n    // Append the VR button to the dom\n    const vrButton = VRButton.createButton(renderer);\n    document.body.appendChild(vrButton);\n\n    return { scene, camera, update };\n  };\n}\n\nexport default new MainScreen();\n"],"names":["canvas","document","getElementById","loadingDiv","progress","loadingText","assets","models","loadingManager","loadModel","loader","model","Promise","resolve","load","gltf","MainScreen","createScene","renderer","generator","RGBELoader","hdrmap","envmap","fromEquirectangular","scene","background","texture","environment","camera","window","innerWidth","innerHeight","position","set","add","light","normalize","xr","enabled","controls","OrbitControls","domElement","minDistance","maxDistance","target","update","createElement","id","style","height","width","pointerEvents","opacity","backgroundColor","zIndex","transition","loadingContainer","display","alignItems","justifyItems","justifyContent","minHeight","textAlign","div","container","color","heading","innerHTML","fontSize","lineHeight","fontWeight","appendChild","loadingTextP","updateDiv","borderRadius","progresssDiv","canvasRect","getBoundingClientRect","canvasPositioning","getComputedStyle","left","top","resizeLoadingUI","body","insertBefore","showCustomLoadingBar","snowSceneAsset","reject","onProgress","url","itemsLoaded","itemsTotal","progressUpdate","progressLevel","updateProgress","Number","toFixed","updateText","loadingTextElem","setLoadingText","onError","GLTFLoader","setPath","err","console","log","snowMat","loadedMaterials","parser","getDependencies","material","name","geometry","ground","rotation","x","Math","PI","addEventListener","remove","hideCustomLoadingBar","vrButton","VRButton"],"sourceRoot":""}