{"version":3,"file":"js/416.threejsBundle.js","mappings":"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","sources":["webpack://webxr-threejs/./src/support/customVRButton.ts","webpack://webxr-threejs/./src/support/customLoadingBar.ts","webpack://webxr-threejs/./src/support/assetLoader.ts","webpack://webxr-threejs/./src/scenes/main.ts"],"sourcesContent":["import { WebGLRenderer } from \"three\";\n\nlet xrSessionIsGranted = false;\n\nconst registerSessionGrantedListener = () => {\n  if (navigator.xr) {\n    // WebXRViewer (based on Firefox) has a bug where addEventListener\n    // throws a silent exception and aborts execution entirely.\n    if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n\n    navigator.xr.addEventListener(\"sessiongranted\", () => {\n      xrSessionIsGranted = true;\n    });\n  }\n};\n\nexport const createButton = async (renderer: WebGLRenderer) => {\n  let currentSession: any = null;\n  const button = document.createElement(\"button\");\n  button.style.display = \"\";\n  button.style.cursor = \"pointer\";\n  button.style.left = \"calc(50% - 50px)\";\n  button.style.width = \"100px\";\n  button.textContent = \"ENTER VR\";\n\n  const showEnterVR = () => {\n    const onSessionStarted = async (session: any) => {\n      session.addEventListener(\"end\", onSessionEnded);\n      await renderer.xr.setSession(session);\n      button.textContent = \"EXIT VR\";\n\n      currentSession = session;\n    };\n\n    const onSessionEnded = () => {\n      currentSession.removeEventListener(\"end\", onSessionEnded);\n      button.textContent = \"ENTER VR\";\n      currentSession = null;\n    };\n\n    button.onmouseleave = () => {\n      button.style.opacity = \"0.5\";\n    };\n\n    button.onmouseenter = () => {\n      button.style.opacity = \"1.0\";\n    };\n\n    button.onclick = async () => {\n      if (currentSession === null && navigator.xr) {\n        // WebXR's requestReferenceSpace only works if the corresponding feature\n        // was requested at session creation time. For simplicity, just ask for\n        // the interesting ones as optional features, but be aware that the\n        // requestReferenceSpace call will fail if it turns out to be unavailable.\n        // ('local' is always available for immersive sessions and doesn't need to\n        // be requested separately.)\n        const sessionInit = {\n          optionalFeatures: [\n            \"local-floor\",\n            \"bounded-floor\",\n            \"hand-tracking\",\n            \"layers\",\n          ],\n        };\n        try {\n          const session = await navigator.xr.requestSession(\n            \"immersive-vr\",\n            sessionInit\n          );\n          onSessionStarted(session);\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        currentSession.end();\n      }\n    };\n  };\n\n  const disableButton = () => {\n    button.style.display = \"\";\n\n    button.style.cursor = \"auto\";\n    button.style.left = \"calc(50% - 75px)\";\n    button.style.width = \"150px\";\n\n    button.onmouseenter = null;\n    button.onmouseleave = null;\n\n    button.onclick = null;\n  };\n\n  const showWebXRNotFound = () => {\n    disableButton();\n    button.textContent = \"VR NOT SUPPORTED\";\n  };\n\n  const showVRNotAllowed = (exception: any) => {\n    disableButton();\n    console.warn(\n      \"Exception when trying to call xr.isSessionSupported\",\n      exception\n    );\n    button.textContent = \"VR NOT ALLOWED\";\n  };\n\n  const stylizeElement = (element: HTMLButtonElement | HTMLAnchorElement) => {\n    element.style.position = \"absolute\";\n    element.style.bottom = \"20px\";\n    element.style.padding = \"12px 6px\";\n    element.style.border = \"1px solid #fff\";\n    element.style.borderRadius = \"4px\";\n    element.style.background = \"rgba(0,0,0,0.1)\";\n    element.style.color = \"#fff\";\n    element.style.font = \"normal 13px sans-serif\";\n    element.style.textAlign = \"center\";\n    element.style.opacity = \"0.5\";\n    element.style.outline = \"none\";\n  };\n\n  if (navigator.xr) {\n    button.id = \"VRButton\";\n\n    stylizeElement(button);\n\n    try {\n      const supported = await navigator.xr.isSessionSupported(\"immersive-vr\");\n      supported ? showEnterVR() : showWebXRNotFound();\n      if (supported && xrSessionIsGranted) {\n        button.click();\n      }\n    } catch (err) {\n      showVRNotAllowed(err);\n    }\n\n    return button;\n  } else {\n    const message = document.createElement(\"a\");\n\n    if (window.isSecureContext === false) {\n      message.href = document.location.href.replace(/^http:/, \"https:\");\n      message.innerHTML = \"WEBXR NEEDS HTTPS\";\n    } else {\n      message.href = \"https://immersiveweb.dev/\";\n      message.innerHTML = \"WEBXR NOT AVAILABLE\";\n    }\n\n    message.style.left = \"calc(50% - 90px)\";\n    message.style.width = \"180px\";\n    message.style.textDecoration = \"none\";\n\n    stylizeElement(message);\n\n    return message;\n  }\n};\n\nregisterSessionGrantedListener();\n","const canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\nlet loadingDiv = document.getElementById(\"loadingDiv\");\nlet progress = \"0%\";\nlet loadingText = \"\";\n\n// Resize\nconst resizeLoadingUI = () => {\n  const canvasRect = canvas.getBoundingClientRect();\n  const canvasPositioning = window.getComputedStyle(canvas).position;\n\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  loadingDiv.style.position =\n    canvasPositioning === \"fixed\" ? \"fixed\" : \"absolute\";\n  loadingDiv.style.left = canvasRect.left + \"px\";\n  loadingDiv.style.top = canvasRect.top + \"px\";\n  loadingDiv.style.width = canvasRect.width + \"px\";\n  loadingDiv.style.height = canvasRect.height + \"px\";\n};\n\nexport const showCustomLoadingBar = () => {\n  if (loadingDiv) {\n    return loadingDiv;\n  }\n  loadingDiv = document.createElement(\"div\");\n  loadingDiv.id = \"loadingDiv\";\n\n  loadingDiv.style.height = \"100vh\";\n  loadingDiv.style.width = \"100%\";\n  loadingDiv.style.pointerEvents = \"none\";\n  loadingDiv.style.opacity = \"1\";\n  loadingDiv.style.backgroundColor = \"black\";\n  loadingDiv.style.zIndex = \"-1\";\n  loadingDiv.style.transition = \"opacity 1.5s ease\";\n\n  // loading container\n  const loadingContainer = document.createElement(\"div\");\n  loadingContainer.style.display = \"flex\";\n  loadingContainer.style.alignItems = \"center\";\n  loadingContainer.style.justifyItems = \"center\";\n  loadingContainer.style.justifyContent = \"center\";\n  loadingContainer.style.minHeight = \"100%\";\n  loadingContainer.style.textAlign = \"center\";\n  // div holder\n  const div = document.createElement(\"div\");\n  // container\n  const container = document.createElement(\"div\");\n  container.style.color = \"rgba(66, 135, 245, 1)\";\n  container.style.textAlign = \"center\";\n\n  // holder\n  // const holder = document.createElement(\"div\");\n  // holder.id = \"holder\";\n  // holder.style.lineHeight = \"1.5\";\n  // holder.style.borderRadius = \"9999px\";\n  // holder.style.background = \"white\";\n  // holder.style.height = \"200px\";\n  // holder.style.width = \"200px\";\n  // holder.style.display = \"flex\";\n  // holder.style.alignItems = \"center\";\n  // holder.style.justifyContent = \"center\";\n  // holder.appendChild(logo);\n  // container.appendChild(holder);\n\n  // Heading\n  const heading = document.createElement(\"h3\");\n  heading.innerHTML = \"Please hang tight..\";\n  heading.style.fontSize = \"1.125rem\";\n  heading.style.lineHeight = \"1.5rem\";\n  heading.style.fontWeight = \"500\";\n\n  container.appendChild(heading);\n\n  // Loading text\n  const loadingTextP = document.createElement(\"p\");\n  loadingTextP.id = \"loadingText\";\n  loadingTextP.innerHTML = \"\";\n\n  // Update section\n  const updateDiv = document.createElement(\"div\");\n  updateDiv.style.width = \"100%\";\n  updateDiv.style.backgroundColor = \"gray\";\n  updateDiv.style.borderRadius = \"9999px\";\n  updateDiv.style.height = \"0.625rem\";\n\n  // Percent section\n  const progresssDiv = document.createElement(\"div\");\n  progresssDiv.style.width = progress;\n  progresssDiv.style.backgroundColor = \"blue\";\n  progresssDiv.style.height = \"0.625rem\";\n  progresssDiv.style.borderRadius = \"9999px\";\n  progresssDiv.id = \"progressLevel\";\n\n  updateDiv.appendChild(progresssDiv);\n\n  container.appendChild(updateDiv);\n\n  div.appendChild(container);\n  loadingContainer.appendChild(div);\n\n  container.appendChild(loadingTextP);\n  loadingDiv.appendChild(loadingContainer);\n\n  resizeLoadingUI();\n\n  document.body.insertBefore(loadingDiv, canvas);\n  return loadingDiv;\n};\n\nexport const hideCustomLoadingBar = () => {\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  const onTransitionEnd = () => {\n    if (loadingDiv) {\n      loadingDiv.remove();\n    }\n  };\n\n  loadingDiv.style.opacity = \"0\";\n  loadingDiv.addEventListener(\"transitionend\", onTransitionEnd);\n};\n\nexport const updateProgress = (progressUpdate: string) => {\n  const progressLevel = document.getElementById(\"progressLevel\");\n  progress = progressUpdate;\n  if (progressLevel) {\n    progressLevel.style.width = progress;\n  }\n};\n\nexport const setLoadingText = (updateText: string) => {\n  const loadingTextElem = document.getElementById(\"loadingText\");\n  loadingText = updateText;\n  if (loadingTextElem) {\n    loadingTextElem.innerHTML = loadingText;\n  }\n};\n","import { LoadingManager } from \"three\";\nimport { GLTF, GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { setLoadingText, updateProgress } from \"./customLoadingBar\";\n\ntype ModelAssets = {\n  [key: string]: GLTF;\n};\n\ninterface AssetContainer {\n  models: ModelAssets;\n}\n\nconst assets: AssetContainer = {\n  models: {},\n};\n\n// Models to load\nlet models = [\"snowScene.glb\"];\n\n// Loading manager to track progress\nconst loadingManager = new LoadingManager();\n\n// Load glTF resource\nexport const loadModel = async (\n  loader: GLTFLoader,\n  model: string\n): Promise<GLTF> =>\n  new Promise((resolve) => {\n    loader.load(\n      // resource URL\n      `models/${model}`,\n      // called when the resource is loaded - onLoad\n      (gltf) => {\n        resolve(gltf);\n      }\n      // Issues with loading GLTF files so using LoadingManager to track loading progress\n      // called while loading is progressing (http request object {loaded and total keys}) - onProgress\n      // (xhr) => {\n      //   console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      // },\n      // called when loading has errors - onError\n      // (error) => {\n      //   console.log(\"An error happened: \", error.message);\n      //   reject(error);\n      // }\n    );\n  });\n\n// Allow loading of all resources\nexport const loadAssets = () =>\n  new Promise<AssetContainer>(async (resolve, reject) => {\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      const percent = Number((itemsLoaded / itemsTotal) * 100).toFixed(0);\n      updateProgress(`${percent}%`);\n      setLoadingText(`Loaded ${itemsLoaded} of ${itemsTotal} files.`);\n    };\n\n    loadingManager.onError = (url) => {\n      reject(\"There was an error loading \" + url);\n    };\n\n    const loader = new GLTFLoader(loadingManager).setPath(\"assets/\");\n    for (const model of models) {\n      try {\n        const gltf = await loadModel(loader, model);\n        assets.models[model] = gltf;\n      } catch (err) {\n        console.log(\"Error loading model: \", err);\n        reject(err);\n      }\n    }\n    resolve(assets);\n  });\n","import {\n  DirectionalLight,\n  HemisphereLight,\n  Mesh,\n  PerspectiveCamera,\n  PlaneGeometry,\n  PMREMGenerator,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\nimport { createButton } from \"../support/customVRButton\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CreateSceneClass } from \"../createScene\";\nimport { loadAssets } from \"../support/assetLoader\";\nimport {\n  hideCustomLoadingBar,\n  showCustomLoadingBar,\n} from \"../support/customLoadingBar\";\n\nexport class MainScreen implements CreateSceneClass {\n  createScene = async (\n    renderer: WebGLRenderer\n  ): Promise<{\n    scene: Scene;\n    camera: PerspectiveCamera;\n    update: () => void;\n  }> => {\n    const generator = new PMREMGenerator(renderer);\n\n    // Create skybox\n    new RGBELoader().load(\"assets/textures/snowy_park.hdr\", (hdrmap) => {\n      const envmap = generator.fromEquirectangular(hdrmap);\n      scene.background = envmap.texture;\n      scene.environment = envmap.texture;\n    });\n\n    const scene = new Scene();\n    const camera = new PerspectiveCamera(\n      60,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    camera.position.set(0, 1.6, 3);\n\n    // Add light\n    scene.add(new HemisphereLight(0x606060, 0x404040));\n    const light = new DirectionalLight(0xffffff);\n    light.position.set(1, 1, 1).normalize();\n    scene.add(light);\n\n    // Enable XR\n    renderer.xr.enabled = true;\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 2;\n    controls.maxDistance = 10;\n    controls.target.set(0, 2, 0);\n    controls.update();\n\n    const loadingElem = showCustomLoadingBar();\n\n    const assets = await loadAssets();\n    const snowSceneAsset = assets.models[\"snowScene.glb\"];\n\n    scene.add(snowSceneAsset.scene);\n    let snowMat;\n    const loadedMaterials = await snowSceneAsset.parser.getDependencies(\n      \"material\"\n    );\n    for (const material of loadedMaterials) {\n      if (material.name === \"Snow\") {\n        snowMat = material;\n      }\n    }\n\n    // Create ground\n    if (snowMat) {\n      const geometry = new PlaneGeometry(100, 100, 20, 20);\n      const ground = new Mesh(geometry, snowMat);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n    }\n\n    // Update next tick before render\n    const update = () => {};\n    // Create custom VR Button\n    const vrButton = await createButton(renderer);\n\n    // Append the VR button to the dom\n    document.body.insertBefore(vrButton, loadingElem);\n\n    // Hide the loading screen\n    hideCustomLoadingBar();\n\n    return { scene, camera, update };\n  };\n}\n\nexport default new MainScreen();\n"],"names":["xrSessionIsGranted","createButton","renderer","currentSession","button","document","createElement","style","display","cursor","left","width","textContent","disableButton","onmouseenter","onmouseleave","onclick","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","opacity","outline","navigator","xr","id","supported","isSessionSupported","onSessionEnded","removeEventListener","sessionInit","optionalFeatures","session","requestSession","addEventListener","setSession","err","console","log","end","showEnterVR","click","exception","warn","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","test","userAgent","registerSessionGrantedListener","canvas","getElementById","loadingDiv","progress","loadingText","assets","models","loadingManager","loadModel","loader","model","Promise","resolve","load","gltf","MainScreen","createScene","generator","RGBELoader","hdrmap","envmap","fromEquirectangular","scene","texture","environment","camera","innerWidth","innerHeight","set","add","light","normalize","enabled","controls","OrbitControls","domElement","minDistance","maxDistance","target","update","loadingElem","height","pointerEvents","backgroundColor","zIndex","transition","loadingContainer","alignItems","justifyItems","justifyContent","minHeight","div","container","heading","fontSize","lineHeight","fontWeight","appendChild","loadingTextP","updateDiv","progresssDiv","canvasRect","getBoundingClientRect","canvasPositioning","getComputedStyle","top","resizeLoadingUI","body","insertBefore","showCustomLoadingBar","snowSceneAsset","reject","onProgress","url","itemsLoaded","itemsTotal","progressUpdate","progressLevel","updateProgress","Number","toFixed","updateText","loadingTextElem","setLoadingText","onError","GLTFLoader","setPath","snowMat","loadedMaterials","parser","getDependencies","material","name","geometry","ground","rotation","x","Math","PI","vrButton","remove","hideCustomLoadingBar"],"sourceRoot":""}