{"version":3,"file":"js/933.threejsBundle.js","mappings":"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","sources":["webpack://webxr-threejs/./src/support/customLoadingBar.ts","webpack://webxr-threejs/./src/support/assetLoader.ts","webpack://webxr-threejs/./src/support/xrSupport.ts","webpack://webxr-threejs/./src/scenes/main.ts"],"sourcesContent":["const canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\nlet loadingDiv = document.getElementById(\"loadingDiv\");\nlet progress = \"0%\";\nlet loadingText = \"\";\n\n// Resize\nconst resizeLoadingUI = () => {\n  const canvasRect = canvas.getBoundingClientRect();\n  const canvasPositioning = window.getComputedStyle(canvas).position;\n\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  loadingDiv.style.position =\n    canvasPositioning === \"fixed\" ? \"fixed\" : \"absolute\";\n  loadingDiv.style.left = canvasRect.left + \"px\";\n  loadingDiv.style.top = canvasRect.top + \"px\";\n  loadingDiv.style.width = canvasRect.width + \"px\";\n  loadingDiv.style.height = canvasRect.height + \"px\";\n};\n\nexport const showCustomLoadingBar = () => {\n  if (loadingDiv) {\n    return loadingDiv;\n  }\n  loadingDiv = document.createElement(\"div\");\n  loadingDiv.id = \"loadingDiv\";\n\n  loadingDiv.style.height = \"100vh\";\n  loadingDiv.style.width = \"100%\";\n  loadingDiv.style.pointerEvents = \"none\";\n  loadingDiv.style.opacity = \"1\";\n  loadingDiv.style.backgroundColor = \"black\";\n  loadingDiv.style.zIndex = \"-1\";\n  loadingDiv.style.transition = \"opacity 1.5s ease\";\n\n  // loading container\n  const loadingContainer = document.createElement(\"div\");\n  loadingContainer.style.display = \"flex\";\n  loadingContainer.style.alignItems = \"center\";\n  loadingContainer.style.justifyItems = \"center\";\n  loadingContainer.style.justifyContent = \"center\";\n  loadingContainer.style.minHeight = \"100%\";\n  loadingContainer.style.textAlign = \"center\";\n  // div holder\n  const div = document.createElement(\"div\");\n  // container\n  const container = document.createElement(\"div\");\n  container.style.color = \"rgba(66, 135, 245, 1)\";\n  container.style.textAlign = \"center\";\n\n  // holder\n  // const holder = document.createElement(\"div\");\n  // holder.id = \"holder\";\n  // holder.style.lineHeight = \"1.5\";\n  // holder.style.borderRadius = \"9999px\";\n  // holder.style.background = \"white\";\n  // holder.style.height = \"200px\";\n  // holder.style.width = \"200px\";\n  // holder.style.display = \"flex\";\n  // holder.style.alignItems = \"center\";\n  // holder.style.justifyContent = \"center\";\n  // holder.appendChild(logo);\n  // container.appendChild(holder);\n\n  // Heading\n  const heading = document.createElement(\"h3\");\n  heading.innerHTML = \"Please hang tight..\";\n  heading.style.fontSize = \"1.125rem\";\n  heading.style.lineHeight = \"1.5rem\";\n  heading.style.fontWeight = \"500\";\n\n  container.appendChild(heading);\n\n  // Loading text\n  const loadingTextP = document.createElement(\"p\");\n  loadingTextP.id = \"loadingText\";\n  loadingTextP.innerHTML = \"\";\n\n  // Update section\n  const updateDiv = document.createElement(\"div\");\n  updateDiv.style.width = \"100%\";\n  updateDiv.style.backgroundColor = \"gray\";\n  updateDiv.style.borderRadius = \"9999px\";\n  updateDiv.style.height = \"0.625rem\";\n\n  // Percent section\n  const progresssDiv = document.createElement(\"div\");\n  progresssDiv.style.width = progress;\n  progresssDiv.style.backgroundColor = \"blue\";\n  progresssDiv.style.height = \"0.625rem\";\n  progresssDiv.style.borderRadius = \"9999px\";\n  progresssDiv.id = \"progressLevel\";\n\n  updateDiv.appendChild(progresssDiv);\n\n  container.appendChild(updateDiv);\n\n  div.appendChild(container);\n  loadingContainer.appendChild(div);\n\n  container.appendChild(loadingTextP);\n  loadingDiv.appendChild(loadingContainer);\n\n  resizeLoadingUI();\n\n  document.body.insertBefore(loadingDiv, canvas);\n  return loadingDiv;\n};\n\nexport const hideCustomLoadingBar = () => {\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  const onTransitionEnd = () => {\n    if (loadingDiv) {\n      loadingDiv.remove();\n    }\n  };\n\n  loadingDiv.style.opacity = \"0\";\n  loadingDiv.addEventListener(\"transitionend\", onTransitionEnd);\n};\n\nexport const updateProgress = (progressUpdate: string) => {\n  const progressLevel = document.getElementById(\"progressLevel\");\n  progress = progressUpdate;\n  if (progressLevel) {\n    progressLevel.style.width = progress;\n  }\n};\n\nexport const setLoadingText = (updateText: string) => {\n  const loadingTextElem = document.getElementById(\"loadingText\");\n  loadingText = updateText;\n  if (loadingTextElem) {\n    loadingTextElem.innerHTML = loadingText;\n  }\n};\n","import { LoadingManager } from \"three\";\nimport { GLTF, GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { setLoadingText, updateProgress } from \"./customLoadingBar\";\n\ntype ModelAssets = {\n  [key: string]: GLTF;\n};\n\ninterface AssetContainer {\n  models: ModelAssets;\n}\n\nconst assets: AssetContainer = {\n  models: {},\n};\n\n// Models to load\nlet models = [\"snowScene.glb\"];\n\n// Loading manager to track progress\nconst loadingManager = new LoadingManager();\n\n// Load glTF resource\nexport const loadModel = async (\n  loader: GLTFLoader,\n  model: string\n): Promise<GLTF> =>\n  new Promise((resolve) => {\n    loader.load(\n      // resource URL\n      `models/${model}`,\n      // called when the resource is loaded - onLoad\n      (gltf) => {\n        resolve(gltf);\n      }\n      // Issues with loading GLTF files so using LoadingManager to track loading progress\n      // called while loading is progressing (http request object {loaded and total keys}) - onProgress\n      // (xhr) => {\n      //   console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      // },\n      // called when loading has errors - onError\n      // (error) => {\n      //   console.log(\"An error happened: \", error.message);\n      //   reject(error);\n      // }\n    );\n  });\n\n// Allow loading of all resources\nexport const loadAssets = () =>\n  new Promise<AssetContainer>(async (resolve, reject) => {\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      const percent = Number((itemsLoaded / itemsTotal) * 100).toFixed(0);\n      updateProgress(`${percent}%`);\n      setLoadingText(`Loaded ${itemsLoaded} of ${itemsTotal} files.`);\n    };\n\n    loadingManager.onError = (url) => {\n      reject(\"There was an error loading \" + url);\n    };\n\n    const loader = new GLTFLoader(loadingManager).setPath(\"assets/\");\n    for (const model of models) {\n      try {\n        const gltf = await loadModel(loader, model);\n        assets.models[model] = gltf;\n      } catch (err) {\n        console.log(\"Error loading model: \", err);\n        reject(err);\n      }\n    }\n    resolve(assets);\n  });\n","import { Vector3, BufferGeometry, Line, WebGLRenderer, Scene } from \"three\";\nimport { XRControllerModelFactory } from \"three/examples/jsm/webxr/XRControllerModelFactory\";\n\nexport const createControllers = (renderer: WebGLRenderer, scene: Scene) => {\n  const controllerModelFactory = new XRControllerModelFactory();\n\n  const geometry = new BufferGeometry().setFromPoints([\n    new Vector3(0, 0, 0),\n    new Vector3(0, 0, -1),\n  ]);\n\n  const line = new Line(geometry);\n  line.name = \"line\";\n  line.scale.z = 10;\n\n  const controllers = [];\n\n  for (let i = 0; i <= 1; i++) {\n    const controller = renderer.xr.getController(i);\n    controller.add(line.clone());\n    controller.userData.selectPressed = false;\n    scene.add(controller);\n\n    controllers.push(controller);\n\n    const grip = renderer.xr.getControllerGrip(i);\n    grip.add(controllerModelFactory.createControllerModel(grip));\n    scene.add(grip);\n  }\n\n  return controllers;\n};\n\nexport const createButton = async (renderer: WebGLRenderer) => {\n  let xrSessionIsGranted = false;\n\n  const registerSessionGrantedListener = () => {\n    if (navigator.xr) {\n      // WebXRViewer (based on Firefox) has a bug where addEventListener\n      // throws a silent exception and aborts execution entirely.\n      if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n\n      navigator.xr.addEventListener(\"sessiongranted\", () => {\n        xrSessionIsGranted = true;\n      });\n    }\n  };\n\n  registerSessionGrantedListener();\n  let currentSession: any = null;\n  const button = document.createElement(\"button\");\n  button.style.display = \"\";\n  button.style.cursor = \"pointer\";\n  button.style.left = \"calc(50% - 50px)\";\n  button.style.width = \"100px\";\n  button.textContent = \"ENTER VR\";\n\n  const showEnterVR = () => {\n    const onSessionStarted = async (session: any) => {\n      session.addEventListener(\"end\", onSessionEnded);\n      await renderer.xr.setSession(session);\n      button.textContent = \"EXIT VR\";\n\n      currentSession = session;\n    };\n\n    const onSessionEnded = () => {\n      currentSession.removeEventListener(\"end\", onSessionEnded);\n      button.textContent = \"ENTER VR\";\n      currentSession = null;\n    };\n\n    button.onmouseleave = () => {\n      button.style.opacity = \"0.5\";\n    };\n\n    button.onmouseenter = () => {\n      button.style.opacity = \"1.0\";\n    };\n\n    button.onclick = async () => {\n      if (currentSession === null && navigator.xr) {\n        // WebXR's requestReferenceSpace only works if the corresponding feature\n        // was requested at session creation time. For simplicity, just ask for\n        // the interesting ones as optional features, but be aware that the\n        // requestReferenceSpace call will fail if it turns out to be unavailable.\n        // ('local' is always available for immersive sessions and doesn't need to\n        // be requested separately.)\n        const sessionInit = {\n          optionalFeatures: [\n            \"local-floor\",\n            \"bounded-floor\",\n            \"hand-tracking\",\n            \"layers\",\n          ],\n        };\n        try {\n          const session = await navigator.xr.requestSession(\n            \"immersive-vr\",\n            sessionInit\n          );\n          onSessionStarted(session);\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        currentSession.end();\n      }\n    };\n  };\n\n  const disableButton = () => {\n    button.style.display = \"\";\n\n    button.style.cursor = \"auto\";\n    button.style.left = \"0\";\n    button.style.width = \"100%\";\n    button.style.background = \"red\";\n\n    button.onmouseenter = null;\n    button.onmouseleave = null;\n\n    button.onclick = null;\n  };\n\n  const showWebXRNotFound = () => {\n    disableButton();\n    button.textContent = \"VR NOT SUPPORTED\";\n  };\n\n  const showVRNotAllowed = (exception: any) => {\n    disableButton();\n    console.warn(\n      \"Exception when trying to call xr.isSessionSupported\",\n      exception\n    );\n    button.textContent = \"VR NOT ALLOWED\";\n  };\n\n  const stylizeElement = (element: HTMLButtonElement | HTMLAnchorElement) => {\n    element.style.position = \"absolute\";\n    element.style.bottom = \"20px\";\n    element.style.padding = \"12px 6px\";\n    element.style.border = \"1px solid #fff\";\n    element.style.borderRadius = \"4px\";\n    element.style.background = \"rgba(0,0,0,0.1)\";\n    element.style.color = \"#fff\";\n    element.style.font = \"normal 13px sans-serif\";\n    element.style.textAlign = \"center\";\n    element.style.opacity = \"0.5\";\n    element.style.outline = \"none\";\n  };\n\n  if (navigator.xr) {\n    button.id = \"VRButton\";\n\n    stylizeElement(button);\n\n    try {\n      const supported = await navigator.xr.isSessionSupported(\"immersive-vr\");\n      supported ? showEnterVR() : showWebXRNotFound();\n      if (supported && xrSessionIsGranted) {\n        button.click();\n      }\n    } catch (err) {\n      showVRNotAllowed(err);\n    }\n\n    return button;\n  } else {\n    const message = document.createElement(\"a\");\n\n    if (window.isSecureContext === false) {\n      message.href = document.location.href.replace(/^http:/, \"https:\");\n      message.innerHTML = \"WEBXR NEEDS HTTPS\";\n    } else {\n      message.href = \"https://immersiveweb.dev/\";\n      message.innerHTML = \"WEBXR NOT AVAILABLE\";\n    }\n\n    message.style.left = \"calc(50% - 90px)\";\n    message.style.width = \"180px\";\n    message.style.textDecoration = \"none\";\n\n    stylizeElement(message);\n\n    return message;\n  }\n};\n","import {\n  DirectionalLight,\n  HemisphereLight,\n  Mesh,\n  PerspectiveCamera,\n  PlaneGeometry,\n  PMREMGenerator,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CreateSceneClass } from \"../createScene\";\nimport { loadAssets } from \"../support/assetLoader\";\nimport {\n  hideCustomLoadingBar,\n  showCustomLoadingBar,\n} from \"../support/customLoadingBar\";\nimport { createButton, createControllers } from \"../support/xrSupport\";\n\nexport class MainScreen implements CreateSceneClass {\n  createScene = async (\n    renderer: WebGLRenderer\n  ): Promise<{\n    scene: Scene;\n    camera: PerspectiveCamera;\n    update: () => void;\n  }> => {\n    const generator = new PMREMGenerator(renderer);\n\n    // Create skybox\n    new RGBELoader().load(\"assets/textures/snowy_park.hdr\", (hdrmap) => {\n      const envmap = generator.fromEquirectangular(hdrmap);\n      scene.background = envmap.texture;\n      scene.environment = envmap.texture;\n    });\n\n    const scene = new Scene();\n    const camera = new PerspectiveCamera(\n      60,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    camera.position.set(0, 1.6, 3);\n\n    // Add light\n    scene.add(new HemisphereLight(0x606060, 0x404040));\n    const light = new DirectionalLight(0xffffff);\n    light.position.set(1, 1, 1).normalize();\n    scene.add(light);\n\n    // Enable XR\n    renderer.xr.enabled = true;\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 2;\n    controls.maxDistance = 10;\n    controls.target.set(0, 2, 0);\n    controls.update();\n\n    const loadingElem = showCustomLoadingBar();\n\n    const assets = await loadAssets();\n    const snowSceneAsset = assets.models[\"snowScene.glb\"];\n\n    scene.add(snowSceneAsset.scene);\n    let snowMat;\n    const loadedMaterials = await snowSceneAsset.parser.getDependencies(\n      \"material\"\n    );\n    for (const material of loadedMaterials) {\n      if (material.name === \"Snow\") {\n        snowMat = material;\n      }\n    }\n\n    // Create ground\n    if (snowMat) {\n      const geometry = new PlaneGeometry(100, 100, 20, 20);\n      const ground = new Mesh(geometry, snowMat);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n    }\n\n    // Create Controllerss\n    const controllers = createControllers(renderer, scene);\n\n    // Create custom VR Button\n    const vrButton = await createButton(renderer);\n\n    // Append the VR button to the dom\n    document.body.insertBefore(vrButton, loadingElem);\n\n    // Update next tick before render\n    const update = () => {};\n\n    // Hide the loading screen\n    hideCustomLoadingBar();\n\n    return { scene, camera, update };\n  };\n}\n\nexport default new MainScreen();\n"],"names":["canvas","document","getElementById","loadingDiv","progress","loadingText","assets","models","loadingManager","loadModel","loader","model","Promise","resolve","load","gltf","createButton","renderer","xrSessionIsGranted","navigator","xr","test","userAgent","addEventListener","registerSessionGrantedListener","currentSession","button","createElement","style","display","cursor","left","width","textContent","disableButton","background","onmouseenter","onmouseleave","onclick","stylizeElement","element","position","bottom","padding","border","borderRadius","color","font","textAlign","opacity","outline","id","supported","isSessionSupported","onSessionEnded","removeEventListener","sessionInit","optionalFeatures","session","requestSession","setSession","err","console","log","end","showEnterVR","click","exception","warn","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","MainScreen","createScene","generator","RGBELoader","hdrmap","envmap","fromEquirectangular","scene","texture","environment","camera","innerWidth","innerHeight","set","add","light","normalize","enabled","controls","OrbitControls","domElement","minDistance","maxDistance","target","update","loadingElem","height","pointerEvents","backgroundColor","zIndex","transition","loadingContainer","alignItems","justifyItems","justifyContent","minHeight","div","container","heading","fontSize","lineHeight","fontWeight","appendChild","loadingTextP","updateDiv","progresssDiv","canvasRect","getBoundingClientRect","canvasPositioning","getComputedStyle","top","resizeLoadingUI","body","insertBefore","showCustomLoadingBar","snowSceneAsset","reject","onProgress","url","itemsLoaded","itemsTotal","progressUpdate","progressLevel","updateProgress","Number","toFixed","updateText","loadingTextElem","setLoadingText","onError","GLTFLoader","setPath","snowMat","loadedMaterials","parser","getDependencies","material","name","geometry","ground","rotation","x","Math","PI","controllerModelFactory","XRControllerModelFactory","setFromPoints","line","scale","z","controllers","i","controller","getController","clone","userData","selectPressed","push","grip","getControllerGrip","createControllerModel","createControllers","vrButton","remove","hideCustomLoadingBar"],"sourceRoot":""}