{"version":3,"file":"js/97.threejsBundle.js","mappings":"wMAgBA,wBACE,KAAAA,YAAc,SACZC,GAAuB,O,EAAA,E,OAAA,E,EAAA,W,4oCAmEV,OA5DPC,EAAS,IAAI,IACbC,EAAY,IAAI,MAAeF,IAGrC,IAAI,KAAaG,KAAK,kCAAkC,SAACC,GACvD,IAAMC,EAASH,EAAUI,oBAAoBF,GAC7CG,EAAMC,WAAaH,EAAOI,QAC1BF,EAAMG,YAAcL,EAAOI,OAC7B,IAEMF,EAAQ,IAAI,OACZI,EAAS,IAAI,MACjB,GACAC,OAAOC,WAAaD,OAAOE,YAC3B,GACA,MAEKC,SAASC,IAAI,EAAG,IAAK,GAG5BT,EAAMU,IAAI,IAAI,MAAgB,QAAU,WAClCC,EAAQ,IAAI,MAAiB,WAC7BH,SAASC,IAAI,EAAG,EAAG,GAAGG,YAC5BZ,EAAMU,IAAIC,GAGVE,SAASC,KAAKC,YAAY,iBAAsBtB,IAGhDA,EAASuB,GAAGC,SAAU,GAGhBC,EAAW,IAAI,IAAcd,EAAQX,EAAS0B,aAC3CC,YAAc,EACvBF,EAASG,YAAc,GACvBH,EAASI,OAAOb,IAAI,EAAG,EAAG,GAC1BS,EAASK,SAEHC,EAAa,WACjB,WAAIC,SAAc,SAACC,EAASC,GAE1BjC,EAAOE,KAEL,+BAEA,SAACgC,GACCF,EAAQE,EACV,IAEA,SAACC,GACCC,QAAQC,IAAKF,EAAIG,OAASH,EAAII,MAAS,IAAM,WAC/C,IAEA,SAACC,GACCJ,QAAQC,IAAI,sBAAuBG,EAAMC,SACzCR,EAAOO,EACT,GAEJ,GAnBA,EAqBW,GAAMV,K,OAGK,OAHlBI,EAAO,SACb5B,EAAMU,IAAIkB,EAAK5B,OAES,GAAM4B,EAAKQ,OAAOC,gBAAgB,a,OAC1D,IADMC,EAAkB,SACnB,EAAL,EAAuB,EAAAA,EAAA,eACC,UADbC,EAAQ,MACJC,OACXC,EAAUF,GAed,OAVIE,IACIC,EAAW,IAAI,MAAc,IAAK,IAAK,GAAI,KAC3CC,EAAS,IAAI,MAAKD,EAAUD,IAC3BG,SAASC,GAAKC,KAAKC,GAAK,EAC/B/C,EAAMU,IAAIiC,IAML,CAAP,EAAO,CAAE3C,MAAK,EAAEI,OAAM,EAAEmB,OAFT,WAAO,I,iBAtFC,K,8QA0F3B,EAEA,YAAmByB,C","sources":["webpack://webxr-threejs/./src/scenes/main.ts"],"sourcesContent":["import {\n  DirectionalLight,\n  HemisphereLight,\n  Mesh,\n  PerspectiveCamera,\n  PlaneGeometry,\n  PMREMGenerator,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\nimport { VRButton } from \"three/examples/jsm/webxr/VRButton\";\nimport { GLTF, GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CreateSceneClass } from \"../createScene\";\n\nexport class MainScreen implements CreateSceneClass {\n  createScene = async (\n    renderer: WebGLRenderer\n  ): Promise<{\n    scene: Scene;\n    camera: PerspectiveCamera;\n    update: () => void;\n  }> => {\n    // Allow loading of gltf files\n    const loader = new GLTFLoader();\n    const generator = new PMREMGenerator(renderer);\n\n    // Create skybox\n    new RGBELoader().load(\"assets/textures/snowy_park.hdr\", (hdrmap) => {\n      const envmap = generator.fromEquirectangular(hdrmap);\n      scene.background = envmap.texture;\n      scene.environment = envmap.texture;\n    });\n\n    const scene = new Scene();\n    const camera = new PerspectiveCamera(\n      60,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    camera.position.set(0, 1.6, 3);\n\n    // Add light\n    scene.add(new HemisphereLight(0x606060, 0x404040));\n    const light = new DirectionalLight(0xffffff);\n    light.position.set(1, 1, 1).normalize();\n    scene.add(light);\n\n    // Append the VR button to the dom\n    document.body.appendChild(VRButton.createButton(renderer));\n\n    // Enable XR\n    renderer.xr.enabled = true;\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 2;\n    controls.maxDistance = 10;\n    controls.target.set(0, 2, 0);\n    controls.update();\n\n    const loadAssets = () =>\n      new Promise<GLTF>((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n          // resource URL\n          \"assets/models/snowScene.glb\",\n          // called when the resource is loaded\n          (gltf) => {\n            resolve(gltf);\n          },\n          // called while loading is progressing\n          (xhr) => {\n            console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n          },\n          // called when loading has errors\n          (error) => {\n            console.log(\"An error happened: \", error.message);\n            reject(error);\n          }\n        );\n      });\n\n    const gltf = await loadAssets();\n    scene.add(gltf.scene);\n    let snowMat;\n    const loadedMaterials = await gltf.parser.getDependencies(\"material\");\n    for (const material of loadedMaterials) {\n      if (material.name === \"Snow\") {\n        snowMat = material;\n      }\n    }\n\n    // Create ground\n    if (snowMat) {\n      const geometry = new PlaneGeometry(100, 100, 20, 20);\n      const ground = new Mesh(geometry, snowMat);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n    }\n\n    // Update next tick before render\n    const update = () => {};\n\n    return { scene, camera, update };\n  };\n}\n\nexport default new MainScreen();\n"],"names":["createScene","renderer","loader","generator","load","hdrmap","envmap","fromEquirectangular","scene","background","texture","environment","camera","window","innerWidth","innerHeight","position","set","add","light","normalize","document","body","appendChild","xr","enabled","controls","domElement","minDistance","maxDistance","target","update","loadAssets","Promise","resolve","reject","gltf","xhr","console","log","loaded","total","error","message","parser","getDependencies","loadedMaterials","material","name","snowMat","geometry","ground","rotation","x","Math","PI","MainScreen"],"sourceRoot":""}