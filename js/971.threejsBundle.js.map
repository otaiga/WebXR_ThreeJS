{"version":3,"file":"js/971.threejsBundle.js","mappings":"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","sources":["webpack://webxr-threejs/./src/support/customLoadingBar.ts","webpack://webxr-threejs/./src/support/assetLoader.ts","webpack://webxr-threejs/./src/support/xrSupport.ts","webpack://webxr-threejs/./src/support/torchController.ts","webpack://webxr-threejs/./src/support/shaders/volumetricSpotlightMaterial.ts","webpack://webxr-threejs/./src/scenes/main.ts"],"sourcesContent":["const canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\nlet loadingDiv = document.getElementById(\"loadingDiv\");\nlet progress = \"0%\";\nlet loadingText = \"\";\n\n// Resize\nconst resizeLoadingUI = () => {\n  const canvasRect = canvas.getBoundingClientRect();\n  const canvasPositioning = window.getComputedStyle(canvas).position;\n\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  loadingDiv.style.position =\n    canvasPositioning === \"fixed\" ? \"fixed\" : \"absolute\";\n  loadingDiv.style.left = canvasRect.left + \"px\";\n  loadingDiv.style.top = canvasRect.top + \"px\";\n  loadingDiv.style.width = canvasRect.width + \"px\";\n  loadingDiv.style.height = canvasRect.height + \"px\";\n};\n\nexport const showCustomLoadingBar = () => {\n  if (loadingDiv) {\n    return loadingDiv;\n  }\n  loadingDiv = document.createElement(\"div\");\n  loadingDiv.id = \"loadingDiv\";\n\n  loadingDiv.style.height = \"100vh\";\n  loadingDiv.style.width = \"100%\";\n  loadingDiv.style.pointerEvents = \"none\";\n  loadingDiv.style.opacity = \"1\";\n  loadingDiv.style.backgroundColor = \"black\";\n  loadingDiv.style.zIndex = \"-1\";\n  loadingDiv.style.transition = \"opacity 1.5s ease\";\n\n  // loading container\n  const loadingContainer = document.createElement(\"div\");\n  loadingContainer.style.display = \"flex\";\n  loadingContainer.style.alignItems = \"center\";\n  loadingContainer.style.justifyItems = \"center\";\n  loadingContainer.style.justifyContent = \"center\";\n  loadingContainer.style.minHeight = \"100%\";\n  loadingContainer.style.textAlign = \"center\";\n  // div holder\n  const div = document.createElement(\"div\");\n  // container\n  const container = document.createElement(\"div\");\n  container.style.color = \"rgba(66, 135, 245, 1)\";\n  container.style.textAlign = \"center\";\n\n  // holder\n  // const holder = document.createElement(\"div\");\n  // holder.id = \"holder\";\n  // holder.style.lineHeight = \"1.5\";\n  // holder.style.borderRadius = \"9999px\";\n  // holder.style.background = \"white\";\n  // holder.style.height = \"200px\";\n  // holder.style.width = \"200px\";\n  // holder.style.display = \"flex\";\n  // holder.style.alignItems = \"center\";\n  // holder.style.justifyContent = \"center\";\n  // holder.appendChild(logo);\n  // container.appendChild(holder);\n\n  // Heading\n  const heading = document.createElement(\"h3\");\n  heading.innerHTML = \"Please hang tight..\";\n  heading.style.fontSize = \"1.125rem\";\n  heading.style.lineHeight = \"1.5rem\";\n  heading.style.fontWeight = \"500\";\n\n  container.appendChild(heading);\n\n  // Loading text\n  const loadingTextP = document.createElement(\"p\");\n  loadingTextP.id = \"loadingText\";\n  loadingTextP.innerHTML = \"\";\n\n  // Update section\n  const updateDiv = document.createElement(\"div\");\n  updateDiv.style.width = \"100%\";\n  updateDiv.style.backgroundColor = \"gray\";\n  updateDiv.style.borderRadius = \"9999px\";\n  updateDiv.style.height = \"0.625rem\";\n\n  // Percent section\n  const progresssDiv = document.createElement(\"div\");\n  progresssDiv.style.width = progress;\n  progresssDiv.style.backgroundColor = \"blue\";\n  progresssDiv.style.height = \"0.625rem\";\n  progresssDiv.style.borderRadius = \"9999px\";\n  progresssDiv.id = \"progressLevel\";\n\n  updateDiv.appendChild(progresssDiv);\n\n  container.appendChild(updateDiv);\n\n  div.appendChild(container);\n  loadingContainer.appendChild(div);\n\n  container.appendChild(loadingTextP);\n  loadingDiv.appendChild(loadingContainer);\n\n  resizeLoadingUI();\n\n  document.body.insertBefore(loadingDiv, canvas);\n  return loadingDiv;\n};\n\nexport const hideCustomLoadingBar = () => {\n  const loadingDiv = document.getElementById(\"loadingDiv\");\n  if (!loadingDiv) {\n    return;\n  }\n\n  const onTransitionEnd = () => {\n    if (loadingDiv) {\n      loadingDiv.remove();\n    }\n  };\n\n  loadingDiv.style.opacity = \"0\";\n  loadingDiv.addEventListener(\"transitionend\", onTransitionEnd);\n};\n\nexport const updateProgress = (progressUpdate: string) => {\n  const progressLevel = document.getElementById(\"progressLevel\");\n  progress = progressUpdate;\n  if (progressLevel) {\n    progressLevel.style.width = progress;\n  }\n};\n\nexport const setLoadingText = (updateText: string) => {\n  const loadingTextElem = document.getElementById(\"loadingText\");\n  loadingText = updateText;\n  if (loadingTextElem) {\n    loadingTextElem.innerHTML = loadingText;\n  }\n};\n","import { LoadingManager } from \"three\";\nimport { GLTF, GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { setLoadingText, updateProgress } from \"./customLoadingBar\";\n\ntype ModelAssets = {\n  [key: string]: GLTF;\n};\n\nexport interface AssetContainer {\n  models: ModelAssets;\n}\n\nconst assets: AssetContainer = {\n  models: {},\n};\n\n// Models to load\nlet models = [\"snowScene.glb\", \"torch.glb\"];\n\n// Loading manager to track progress\nconst loadingManager = new LoadingManager();\n\n// Load glTF resource\nexport const loadModel = async (\n  loader: GLTFLoader,\n  model: string\n): Promise<GLTF> =>\n  new Promise((resolve) => {\n    loader.load(\n      // resource URL\n      `models/${model}`,\n      // called when the resource is loaded - onLoad\n      (gltf) => {\n        resolve(gltf);\n      }\n      // Issues with loading GLTF files so using LoadingManager to track loading progress\n      // called while loading is progressing (http request object {loaded and total keys}) - onProgress\n      // (xhr) => {\n      //   console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      // },\n      // called when loading has errors - onError\n      // (error) => {\n      //   console.log(\"An error happened: \", error.message);\n      //   reject(error);\n      // }\n    );\n  });\n\n// Allow loading of all resources\nexport const loadAssets = () =>\n  new Promise<AssetContainer>(async (resolve, reject) => {\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      const percent = Number((itemsLoaded / itemsTotal) * 100).toFixed(0);\n      updateProgress(`${percent}%`);\n      setLoadingText(`Loaded ${itemsLoaded} of ${itemsTotal} files.`);\n    };\n\n    loadingManager.onError = (url) => {\n      reject(\"There was an error loading \" + url);\n    };\n\n    const loader = new GLTFLoader(loadingManager).setPath(\"assets/\");\n    for (const model of models) {\n      try {\n        const gltf = await loadModel(loader, model);\n        assets.models[model] = gltf;\n      } catch (err) {\n        console.log(\"Error loading model: \", err);\n        reject(err);\n      }\n    }\n    resolve(assets);\n  });\n","import { Vector3, BufferGeometry, Line, WebGLRenderer, Scene } from \"three\";\nimport { XRControllerModelFactory } from \"three/examples/jsm/webxr/XRControllerModelFactory\";\n\nexport const createControllers = (renderer: WebGLRenderer, scene: Scene) => {\n  const controllerModelFactory = new XRControllerModelFactory();\n\n  const geometry = new BufferGeometry().setFromPoints([\n    new Vector3(0, 0, 0),\n    new Vector3(0, 0, -1),\n  ]);\n\n  const line = new Line(geometry);\n  line.name = \"line\";\n  line.scale.z = 0;\n\n  const controllers = [];\n\n  for (let i = 0; i <= 1; i++) {\n    const controller = renderer.xr.getController(i);\n    controller.add(line.clone());\n    controller.userData.selectPressed = false;\n    const grip = renderer.xr.getControllerGrip(i);\n    const controllerModel = controllerModelFactory.createControllerModel(grip);\n    grip.add(controllerModel);\n    controllers.push({ controller, grip });\n  }\n\n  return controllers;\n};\n\nexport const createButton = async (renderer: WebGLRenderer) => {\n  let xrSessionIsGranted = false;\n\n  const registerSessionGrantedListener = () => {\n    if (navigator.xr) {\n      // WebXRViewer (based on Firefox) has a bug where addEventListener\n      // throws a silent exception and aborts execution entirely.\n      if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n\n      navigator.xr.addEventListener(\"sessiongranted\", () => {\n        xrSessionIsGranted = true;\n      });\n    }\n  };\n\n  registerSessionGrantedListener();\n  let currentSession: any = null;\n  const button = document.createElement(\"button\");\n  button.style.display = \"\";\n  button.style.cursor = \"pointer\";\n  button.style.left = \"calc(50% - 50px)\";\n  button.style.width = \"100px\";\n  button.textContent = \"ENTER VR\";\n\n  const showEnterVR = () => {\n    const onSessionStarted = async (session: any) => {\n      session.addEventListener(\"end\", onSessionEnded);\n      await renderer.xr.setSession(session);\n      button.textContent = \"EXIT VR\";\n\n      currentSession = session;\n    };\n\n    const onSessionEnded = () => {\n      currentSession.removeEventListener(\"end\", onSessionEnded);\n      button.textContent = \"ENTER VR\";\n      currentSession = null;\n    };\n\n    button.onmouseleave = () => {\n      button.style.opacity = \"0.5\";\n    };\n\n    button.onmouseenter = () => {\n      button.style.opacity = \"1.0\";\n    };\n\n    button.onclick = async () => {\n      if (currentSession === null && navigator.xr) {\n        // WebXR's requestReferenceSpace only works if the corresponding feature\n        // was requested at session creation time. For simplicity, just ask for\n        // the interesting ones as optional features, but be aware that the\n        // requestReferenceSpace call will fail if it turns out to be unavailable.\n        // ('local' is always available for immersive sessions and doesn't need to\n        // be requested separately.)\n        const sessionInit = {\n          optionalFeatures: [\n            \"local-floor\",\n            \"bounded-floor\",\n            \"hand-tracking\",\n            \"layers\",\n          ],\n        };\n        try {\n          const session = await navigator.xr.requestSession(\n            \"immersive-vr\",\n            sessionInit\n          );\n          onSessionStarted(session);\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        currentSession.end();\n      }\n    };\n  };\n\n  const disableButton = () => {\n    button.style.display = \"\";\n\n    button.style.cursor = \"auto\";\n    button.style.left = \"0\";\n    button.style.width = \"100%\";\n    button.style.background = \"red\";\n\n    button.onmouseenter = null;\n    button.onmouseleave = null;\n\n    button.onclick = null;\n  };\n\n  const showWebXRNotFound = () => {\n    disableButton();\n    button.textContent = \"VR NOT SUPPORTED\";\n  };\n\n  const showVRNotAllowed = (exception: any) => {\n    disableButton();\n    console.warn(\n      \"Exception when trying to call xr.isSessionSupported\",\n      exception\n    );\n    button.textContent = \"VR NOT ALLOWED\";\n  };\n\n  const stylizeElement = (element: HTMLButtonElement | HTMLAnchorElement) => {\n    element.style.position = \"absolute\";\n    element.style.bottom = \"20px\";\n    element.style.padding = \"12px 6px\";\n    element.style.border = \"1px solid #fff\";\n    element.style.borderRadius = \"4px\";\n    element.style.background = \"rgba(0,0,0,0.1)\";\n    element.style.color = \"#fff\";\n    element.style.font = \"normal 13px sans-serif\";\n    element.style.textAlign = \"center\";\n    element.style.opacity = \"0.5\";\n    element.style.outline = \"none\";\n  };\n\n  if (navigator.xr) {\n    button.id = \"VRButton\";\n\n    stylizeElement(button);\n\n    try {\n      const supported = await navigator.xr.isSessionSupported(\"immersive-vr\");\n      supported ? showEnterVR() : showWebXRNotFound();\n      if (supported && xrSessionIsGranted) {\n        button.click();\n      }\n    } catch (err) {\n      showVRNotAllowed(err);\n    }\n\n    return button;\n  } else {\n    const message = document.createElement(\"a\");\n\n    if (window.isSecureContext === false) {\n      message.href = document.location.href.replace(/^http:/, \"https:\");\n      message.innerHTML = \"WEBXR NEEDS HTTPS\";\n    } else {\n      message.href = \"https://immersiveweb.dev/\";\n      message.innerHTML = \"WEBXR NOT AVAILABLE\";\n    }\n\n    message.style.left = \"calc(50% - 90px)\";\n    message.style.width = \"180px\";\n    message.style.textDecoration = \"none\";\n\n    stylizeElement(message);\n\n    return message;\n  }\n};\n","import {\n  XRTargetRaySpace,\n  XRGripSpace,\n  Group,\n  SpotLight,\n  CylinderGeometry,\n  Mesh,\n  Event,\n} from \"three\";\nimport { AssetContainer } from \"./assetLoader\";\nimport { volumetricSpotLightMaterial } from \"./shaders/volumetricSpotlightMaterial\";\n\nexport const createSpotLight = (\n  event: Event & {\n    type: \"connected\";\n  } & {\n    target: XRTargetRaySpace;\n  },\n  controllerGroup: {\n    controller: XRTargetRaySpace;\n    grip: XRGripSpace;\n  },\n  assets: AssetContainer\n) => {\n  if (event.data.targetRayMode === \"tracked-pointer\") {\n    const torchAsset = assets.models[\"torch.glb\"];\n    const torch = torchAsset.scene;\n    torch.scale.set(0.2, 0.2, 0.2);\n    controllerGroup.controller.remove(...controllerGroup.controller.children);\n    controllerGroup.grip.remove(...controllerGroup.grip.children);\n\n    // add spotlight\n    const spotlightGroup = new Group();\n    spotlightGroup.name = \"spotlight\";\n    const spotlight = new SpotLight(0xffffff, 2, 12, Math.PI / 15, 0.3);\n    spotlight.position.set(0, 0, 0);\n    spotlight.target.position.set(0, 0, -1);\n    spotlightGroup.add(spotlight.target);\n    spotlightGroup.add(spotlight);\n\n    const geometry = new CylinderGeometry(0.03, 1, 5, 32, 5, true);\n    geometry.rotateX(Math.PI / 2);\n    const material = volumetricSpotLightMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.translateZ(-2.6);\n    spotlightGroup.add(mesh);\n\n    spotlightGroup.visible = false;\n\n    controllerGroup.controller.add(torch);\n    controllerGroup.controller.add(spotlightGroup);\n  }\n};\n","import { Color, ShaderMaterial, Vector3 } from \"three\";\n\n// Based on https://github.com/jeromeetienne/threex.volumetricspotlight\nexport const volumetricSpotLightMaterial = (\n  color = new Color(0xffffff),\n  position = new Vector3(),\n  attenuation = 5.0,\n  anglePower = 1.2\n) => {\n  const vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\",\n  ].join(\"\\n\");\n\n  const fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\",\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  const material = new ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        value: attenuation,\n      },\n      anglePower: {\n        value: anglePower,\n      },\n      spotPosition: {\n        value: position,\n      },\n      lightColor: {\n        value: color,\n      },\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    // side\t\t: THREE.DoubleSide,\n    // blending\t: THREE.AdditiveBlending,\n    transparent: true,\n    depthWrite: false,\n  });\n  return material;\n};\n","import {\n  BackSide,\n  Clock,\n  DirectionalLight,\n  HemisphereLight,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  PerspectiveCamera,\n  PlaneGeometry,\n  PMREMGenerator,\n  Raycaster,\n  Scene,\n  SphereGeometry,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CreateSceneClass } from \"../createScene\";\nimport { loadAssets } from \"../support/assetLoader\";\nimport {\n  hideCustomLoadingBar,\n  showCustomLoadingBar,\n} from \"../support/customLoadingBar\";\nimport { createButton, createControllers } from \"../support/xrSupport\";\nimport { createSpotLight } from \"../support/torchController\";\n\nexport class MainScreen implements CreateSceneClass {\n  createScene = async (\n    renderer: WebGLRenderer\n  ): Promise<{\n    scene: Scene;\n    camera: PerspectiveCamera;\n    update: () => void;\n  }> => {\n    const generator = new PMREMGenerator(renderer);\n    const workingMatrix = new Matrix4();\n    const raycaster = new Raycaster();\n    const clock = new Clock();\n    const origin = new Vector3();\n\n    // Create skybox\n    new RGBELoader().load(\"assets/textures/snowy_park.hdr\", (hdrmap) => {\n      const envmap = generator.fromEquirectangular(hdrmap);\n      scene.background = envmap.texture;\n      scene.environment = envmap.texture;\n    });\n\n    const scene = new Scene();\n\n    // create camera\n    const camera = new PerspectiveCamera(\n      60,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    camera.position.set(0, 1.6, 3);\n\n    // create dolly for moving camera\n    const dolly = new Object3D();\n    dolly.add(camera);\n    scene.add(dolly);\n\n    const dummyCam = new Object3D();\n    camera.add(dummyCam);\n\n    // Add light\n    scene.add(new HemisphereLight(0x606060, 0x404040));\n    const light = new DirectionalLight(0xffffff);\n    light.position.set(1, 1, 1).normalize();\n    scene.add(light);\n\n    // Enable XR\n    renderer.xr.enabled = true;\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 2;\n    controls.maxDistance = 10;\n    controls.target.set(0, 2, 0);\n    controls.update();\n\n    const loadingElem = showCustomLoadingBar();\n\n    const assets = await loadAssets();\n    const snowSceneAsset = assets.models[\"snowScene.glb\"];\n\n    scene.add(snowSceneAsset.scene);\n    let snowMat;\n    const loadedMaterials = await snowSceneAsset.parser.getDependencies(\n      \"material\"\n    );\n    for (const material of loadedMaterials) {\n      if (material.name === \"Snow\") {\n        snowMat = material;\n      }\n    }\n\n    // Create ground\n    if (snowMat) {\n      const geometry = new PlaneGeometry(100, 100, 20, 20);\n      const ground = new Mesh(geometry, snowMat);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n    }\n\n    // Add a sphere\n    const geometry = new SphereGeometry(0.2, 20);\n    const material = new MeshBasicMaterial({ color: 0x00ff00 });\n    const sphere = new Mesh(geometry, material);\n    sphere.position.set(5, 1, -8);\n    scene.add(sphere);\n\n    const sphereHighlight = new Mesh(\n      geometry,\n      new MeshBasicMaterial({ color: 0xffffff, side: BackSide })\n    );\n    sphereHighlight.scale.set(1.2, 1.2, 1.2);\n\n    // Create Controllerss\n    const controllers = createControllers(renderer, scene);\n\n    for (const controllerGroup of controllers) {\n      controllerGroup.controller.addEventListener(\"selectstart\", () => {\n        for (const child of controllerGroup.controller.children) {\n          if (child.name === \"line\") {\n            child.scale.z = 10;\n          }\n          if (child.name === \"spotlight\" && !child.visible) {\n            child.visible = true;\n          }\n        }\n        controllerGroup.controller.userData.selectPressed = true;\n      });\n\n      controllerGroup.controller.addEventListener(\"selectend\", () => {\n        for (const child of controllerGroup.controller.children) {\n          if (child.name === \"line\") {\n            child.scale.z = 0;\n            sphereHighlight.visible = false;\n          }\n          if (child.name === \"spotlight\" && child.visible) {\n            child.visible = false;\n          }\n        }\n        controllerGroup.controller.userData.selectPressed = false;\n      });\n\n      controllerGroup.controller.addEventListener(\"disconnected\", () => {\n        controllerGroup.controller.remove(\n          ...controllerGroup.controller.children\n        );\n      });\n\n      controllerGroup.controller.addEventListener(\"connected\", (event) => {\n        const handedness = event.data.handedness;\n        controllerGroup.controller.name = `${handedness}Controller`;\n        if (handedness === \"left\") {\n          createSpotLight(event, controllerGroup, assets);\n        }\n      });\n      dolly.add(controllerGroup.controller);\n      dolly.add(controllerGroup.grip);\n    }\n\n    const handleController = () => {\n      const rightControllerGroup =\n        controllers[0].controller.name === \"rightController\"\n          ? controllers[0]\n          : controllers[1];\n      if (\n        rightControllerGroup.controller &&\n        rightControllerGroup.controller.userData.selectPressed\n      ) {\n        workingMatrix\n          .identity()\n          .extractRotation(rightControllerGroup.controller.matrixWorld);\n\n        raycaster.ray.origin.setFromMatrixPosition(\n          rightControllerGroup.controller.matrixWorld\n        );\n        raycaster.ray.direction.set(0, 0, -1).applyMatrix4(workingMatrix);\n\n        const intersects = raycaster.intersectObjects([sphere]);\n\n        if (intersects.length > 0) {\n          intersects[0].object.add(sphereHighlight);\n          sphereHighlight.visible = true;\n        } else {\n          sphereHighlight.visible = false;\n        }\n      }\n    };\n\n    // Create custom VR Button\n    const vrButton = await createButton(renderer);\n    // Append the VR button to the dom\n    document.body.insertBefore(vrButton, loadingElem);\n\n    // Update next tick before render\n    const update = () => {\n      const dt = clock.getDelta();\n      // check for xr session\n      const session = renderer.xr.getSession();\n      if (session) {\n        let i = 0;\n        // get button pushes and axis\n        for (const inputSource of session.inputSources) {\n          const gamepad = inputSource?.gamepad;\n          if (inputSource && gamepad) {\n            // map data to use with controllers\n            const data = {\n              handedness: inputSource.handedness,\n              buttons: inputSource.gamepad.buttons.map((b) => b.value),\n              axes: inputSource.gamepad.axes.slice(0),\n            };\n\n            // map thumb sticks\n            if (data.handedness === \"left\") {\n              const speed = 2;\n              let pos = dolly.position.clone();\n              data.axes.map((value, i) => {\n                if (Math.abs(value) > 0.2) {\n                  //left and right axis on thumbsticks\n                  if (i === 2) {\n                    if (data.axes[2] > 0) {\n                      dolly.rotation.y -= dt * 1;\n                      console.log(\"left on left thumbstick\");\n                    } else {\n                      dolly.rotation.y += dt * 1;\n                      console.log(\"right on left thumbstick\");\n                    }\n                    pos = dolly.getWorldPosition(origin);\n                  }\n                  //up and down axis on thumbsticks\n                  if (i === 3) {\n                    if (data.axes[3] > 0) {\n                      pos.z += 1;\n                      dolly.translateZ(dt * speed);\n                      console.log(\"up on left thumbstick\");\n                    } else {\n                      pos.z -= 1;\n                      dolly.translateZ(-dt * speed);\n                      console.log(\"down on left thumbstick\");\n                    }\n                  }\n                }\n              });\n            }\n          }\n        }\n        handleController();\n      }\n    };\n\n    // Hide the loading screen\n    hideCustomLoadingBar();\n\n    return { scene, camera, update };\n  };\n}\n\nexport default new MainScreen();\n"],"names":["canvas","document","getElementById","loadingDiv","progress","loadingText","assets","models","loadingManager","loadModel","loader","model","Promise","resolve","load","gltf","loadAssets","reject","onProgress","url","itemsLoaded","itemsTotal","progressUpdate","progressLevel","style","width","updateProgress","Number","toFixed","updateText","loadingTextElem","innerHTML","setLoadingText","onError","GLTFLoader","setPath","err","console","log","createButton","renderer","xrSessionIsGranted","navigator","xr","test","userAgent","addEventListener","registerSessionGrantedListener","currentSession","button","createElement","display","cursor","left","textContent","disableButton","background","onmouseenter","onmouseleave","onclick","stylizeElement","element","position","bottom","padding","border","borderRadius","color","font","textAlign","opacity","outline","id","supported","isSessionSupported","onSessionEnded","removeEventListener","sessionInit","optionalFeatures","session","requestSession","setSession","end","showEnterVR","click","exception","warn","message","window","isSecureContext","href","location","replace","textDecoration","createSpotLight","event","controllerGroup","data","targetRayMode","torch","scene","scale","set","controller","remove","children","grip","spotlightGroup","name","spotlight","Math","PI","target","add","geometry","rotateX","material","attenuation","anglePower","vertexShader","join","fragmentShader","uniforms","value","spotPosition","lightColor","transparent","depthWrite","volumetricSpotLightMaterial","mesh","translateZ","visible","MainScreen","createScene","generator","workingMatrix","raycaster","clock","origin","RGBELoader","hdrmap","envmap","fromEquirectangular","texture","environment","camera","innerWidth","innerHeight","dolly","dummyCam","light","normalize","enabled","controls","OrbitControls","domElement","minDistance","maxDistance","update","loadingElem","height","pointerEvents","backgroundColor","zIndex","transition","loadingContainer","alignItems","justifyItems","justifyContent","minHeight","div","container","heading","fontSize","lineHeight","fontWeight","appendChild","loadingTextP","updateDiv","progresssDiv","canvasRect","getBoundingClientRect","canvasPositioning","getComputedStyle","top","resizeLoadingUI","body","insertBefore","showCustomLoadingBar","snowSceneAsset","snowMat","loadedMaterials","parser","getDependencies","ground","rotation","x","sphere","sphereHighlight","side","controllers","controllerModelFactory","XRControllerModelFactory","setFromPoints","line","z","i","getController","clone","userData","selectPressed","getControllerGrip","controllerModel","createControllerModel","push","createControllers","child","handedness","vrButton","hideCustomLoadingBar","dt","getDelta","getSession","inputSource","inputSources","gamepad","buttons","map","b","axes","slice","speed","pos","abs","y","getWorldPosition","rightControllerGroup","identity","extractRotation","matrixWorld","ray","setFromMatrixPosition","direction","applyMatrix4","intersects","intersectObjects","length","object","handleController"],"sourceRoot":""}